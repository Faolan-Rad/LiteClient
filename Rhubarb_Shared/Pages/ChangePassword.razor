@page "/ChangePassword/{Email}/{Token}"

@inject RhubarbAPIClient client
@inject Localisation loc
@inject NavigationManager nav


<div class="defaultOnSmallScreen container py-5 h-100">
    <div class="defaultOnSmallScreen row d-flex justify-content-center align-items-center h-100">
        <div class="defaultOnSmallScreen col-12 col-md-8 col-lg-6 col-xl-5">
            <div class="defaultOnSmallScreen card" style="border-radius: 1rem;">
                <div class="card-body p-5 text-center">
                    <EditForm Model="@changePasswordModel" OnValidSubmit="OnValidSubmit">
                        <DataAnnotationsValidator />
                        <div class="hideOnSmallScreen">
                            @if (loading)
                            {
                                <Loading></Loading>
                            }
                            else
                            {
                                <RhubarbLogo></RhubarbLogo>
                            }
                        </div>
                        <div class="mb-md-5 mt-md-4 pb-5">
                            <h3 class="fw-bold mb-2 text-uppercase">@loc.GetLocalString("Account.ChangePassword")</h3>
                            <div class="form-outline form-white mb-4">
                                @if (error)
                                {
                                    <label class="form-label; alert-danger" style="text-align: left; width: 100%; background:initial" for="typePasswordX">@loc.GetLocalString(msg)</label>
                                }
                                else
                                {
                                    <label class="form-label" style="text-align: left; width: 100%" for="typePasswordX">@loc.GetLocalString("Programs.Login.Password")</label>
                                }
                                <InputText @bind-Value="changePasswordModel.NewPassword" type="password" id="typePasswordX" class="form-control form-control-lg" />
                                <ValidationMessage For="@(() => changePasswordModel.NewPassword)" />
                            </div>
                            <div class="form-outline form-white mb-4">
                                <label class="form-label" style="text-align: left; width: 100%" for="typePasswordConfX">@loc.GetLocalString("Programs.Login.ConfirmPassword")</label>
                                <InputText @bind-Value="confPassword" type="password" id="typePasswordConfX" class="form-control form-control-lg" />
                            </div>

                            <button disabled="@loading" class="btn btn-outline-dark btn-lg px-5" type="submit">
                                @loc.GetLocalString("Account.ChangePassword")
                            </button>


                        </div>

                    </EditForm>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public string Email { get; set; }
    [Parameter]
    public string Token { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();
    }

    private bool loading;
    public string confPassword;
    public RChangePassword changePasswordModel = new RChangePassword();
    private bool error;
    private string msg;

    private void NavToLogin()
    {
        nav.NavigateTo("Login");
    }

    private async Task OnValidSubmit()
    {
        if (loading)
        {
            return;
        }
        loading = true;
        if (confPassword != changePasswordModel.NewPassword)
        {
            error = true;
            msg = "Programs.Login.MatchPassword";
            loading = false;
            return;
        }
        changePasswordModel.Token = System.Uri.UnescapeDataString(Token);
        changePasswordModel.Email = System.Uri.UnescapeDataString(Email);
        var respones = await client.ChangePassword(changePasswordModel);
        error = true;
        msg = respones;
        loading = false;
        NavToLogin();
    }
}